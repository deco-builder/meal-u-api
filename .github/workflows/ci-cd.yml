name: CI/CD

on:
  push:
    branches:
      - main
      - dev

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker image
        run: |
          # Determine the environment and Docker image tag
          if [ "${GITHUB_REF##*/}" = "dev" ]; then
            IMAGE_TAG="dev"
            PORT="8001"
            ENV_FILE=".env.dev"
          else
            IMAGE_TAG="prod"
            PORT="8000"
            ENV_FILE=".env.prod"
          fi
          
          docker build -t nafisazizir/meal-u-${IMAGE_TAG}:latest .
          docker push nafisazizir/meal-u-${IMAGE_TAG}:latest

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.AWS_SSH_KEY }}

      - name: SSH and deploy
        run: |
          # Determine the environment and Docker image tag
          if [ "${GITHUB_REF##*/}" = "dev" ]; then
            IMAGE_TAG="dev"
            PORT="8001"
            ENV_FILE=".env.dev"
            COMPOSE_PROJECT_NAME="meal-u-dev"
          else
            IMAGE_TAG="prod"
            PORT="8000"
            ENV_FILE=".env.prod"
            COMPOSE_PROJECT_NAME="meal-u-prod"
          fi
        
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.AWS_HOST }} << EOF
            cd meal-u/
            docker pull nafisazizir/meal-u-${IMAGE_TAG}:latest

            # Print debug information
            echo "IMAGE_TAG=${IMAGE_TAG}"
            echo "PORT=${PORT}"
            echo "ENV_FILE=${ENV_FILE}"
            echo "COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME}"
            
            # Export environment variables
            export IMAGE_TAG=${IMAGE_TAG}
            export PORT=${PORT}
            export ENV_FILE=${ENV_FILE}
            export COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME}

            # Stop and remove existing containers, networks, and volumes
            docker-compose -p ${COMPOSE_PROJECT_NAME} -f docker-compose.yml down

            # Start new containers
            IMAGE_TAG=${IMAGE_TAG} PORT=${PORT} ENV_FILE=${ENV_FILE} COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME} docker-compose -p ${COMPOSE_PROJECT_NAME} -f docker-compose.yml up -d

            docker system prune -f --volumes
          EOF
        
